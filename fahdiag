#!/bin/bash
echo fahdiag 0.2
echo Brought to you by The \[H\]orde
echo Copyright \(c\) 2013 
echo Dave Corfman \<davecorfman@gmail.com\>
echo Kris Rusocki \<kszysiu@gmail.com\>
echo

FAHDIR=

test_dir()
{
	[ -z "$1" ] && return 1
	[ -d "$1" ] || return 2
	[ -f "$1/fah6" ] || return 3
	[ -x "$1/fah6" ] || return 4
	FAHDIR=$1
	return 0
}

[ -z "$1" ] || FAHDIR=$1

if [ -z "$FAHDIR" ]; then
	echo Detecting FAH directory.
	test_dir ~/fah || test_dir /var/lib/origami/foldingathome/CPU1
	if [ -z "$FAHDIR" ]; then
		echo Couldn\'t detect FAH directory.
		echo Run:
		echo -e \\t$0 \<fah-directory\>
		exit 1
	fi
fi

echo Using $FAHDIR
echo

echo Hostname: $(hostname)
echo IP: $(ip route get 8.8.8.8 | sed -ne '{s/^.*src.//;p;q}')
echo Kernel: $(uname -r)
echo

echo Client running:
ps auxw | egrep '[^]]fah6([^\.]|$)'
echo

echo tmpfs:
grep -v ^\# /etc/fstab | grep $FAHDIR
df -hT $FAHDIR | tail -n +2
ls -ld $FAHDIR
echo

echo Crontab entry:
crontab -l | grep fahbackup
echo

echo Restore -- rc.local:
grep -v ^\# /etc/rc.local | grep fahrestore
echo

echo Backup data:
echo current
ls -l ~/fahbackup-data/current/
echo previous
ls -l ~/fahbackup-data/previous/
echo

echo Backup-on-shutdown:
ls -l /etc/rc{0,1,6}.d/K10fahbackup-rc /etc/init.d/fahbackup-rc
echo

echo Kraken version:
thekraken -V 2>&1 | head -1
ls -l $(which thekraken)
echo

echo Kraken wrap:
ls -l $FAHDIR/*FahCore*
echo

echo Kraken running:
ps -Leopid=,tid=,pcpu=,psr=,comm= | awk '/[F]ahCo/ { if ($3 > 10) print }'
echo

echo Langouste version:
langouste3 -V | sed -r 's/(Langouste3 )([0-9\.]+)[^0-9\.].*$/\2/'
echo

echo Langouste running:
ps auxw | grep [^]]langouste3
echo

echo Langouste -- client.cfg:
egrep '^username=|^team=|^host=|^port=|^active=' $FAHDIR/client.cfg
echo

echo Langouste script version:
md5sum $FAHDIR/langouste-helper.sh
echo
echo Langouste script permission:
ls -l $FAHDIR/langouste-helper.sh
echo

echo Langouste -- rc.local:
grep -v ^\# /etc/rc.local | grep langouste
echo

echo NUMA -- memory:
grep Mem[FT] /sys/devices/system/node/node[0-9]*/meminfo
echo

GOVERNOR=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2> /dev/null)
[ -z "$GOVERNOR" ] && GOVERNOR="scaling disabled"
echo Scaling governor: $GOVERNOR
echo

echo top 5 CPU consumers:
ps -eopid=,tid=,pcpu=,psr=,comm=  | sort -nrk3,3 | head -5
echo

echo vmstat \(this will take 10 seconds\):
vmstat 5 3 | tail -2
